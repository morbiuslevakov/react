import React, {useContext, useEffect, useState} from "react";
import { useNavigate, useLocation, Navigate } from "react-router-dom";
import {CustomInput, PageContent, Wrapper} from "../../components/auth-pages/Styled";
import UserContext from "../../context/user-context";
import { Infographic } from '../../components/infogrphic/Infographic';
import { resendConfirmApi, confirmAccount } from '../../utils/api-utils';
import { FormError } from "../../components/auth-pages/FormError";
import { InputLabel, Stack } from "@mui/material";
import { authErrorMessages } from "../../constants/auth";

export const ConfirmAccount = () => {
    const { user } = useContext(UserContext);
    const navigate = useNavigate();
    const location = useLocation();
    const params = new URLSearchParams(location.search);
    const [email, setEmail] = useState(params.get('email'))
    const [token, setToken] = useState("");
    const [isToken, setIsToken] = useState(false);
    const [isError, setIsError] = useState(false);
    const [confirmed, setConfirmed] = useState(false);
    const [errorMessage, setErrorMessage] = useState("");

    const onClickBack = () => {
        navigate("/login");
        window.location.reload();
    }

    const handleResend = async () => {
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
            setIsError(true);
            setErrorMessage(authErrorMessages.email);
            return;
        }
        resendConfirmApi(email).then();
        navigate("/login");
        window.location.reload();
    }

    useEffect(() => {
        if (params.get("token") !== null) {
            setIsToken(true);
            confirmAccount(params.get("token")).then((response) => {
                setConfirmed(true);
            }).catch((error) => {
                throw error;
            });
        }
    }, [email, token]);

    if (user) {
        return <Navigate to={'/'} />
    }

    return (
        <Wrapper>
            <PageContent style={{paddingTop: "100px"}}>
                {!isToken &&
                    <>
                        <Infographic title="" titleFloat="left" textFloat="right" text={<>–ü—Ä–∏–≤–µ—Å—Ç–≤—É–µ–º, <strong>{email}</strong>!<br/>
                            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø—Ä–µ–∂–¥–µ —á–µ–º –≤–æ–π—Ç–∏. –ú—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–∏—Å—å–º–æ —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è
                            –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–∏—Å—å–º–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞–≤
                            –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–ø–∫—É "–°–ø–∞–º". –° –£–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ YUSRA üëã</>}/>
                        <FormError isError={isError} errorMessage={errorMessage} />
                        <Stack gap={1} style={{"marginTop": "10px", width: "100%", alignItems: "center"}}>
                            <CustomInput style={{width: "70%"}} size="lg" type="text" value={email} onChange={(event) => setEmail(event.target.value)} placeholder="–í–≤–µ–¥–∏—Ç–µ email" />
                        </Stack>
                        <div style={{"width": "100%", "display": "flex", "flexDirection":"column"}}>
                            <button onClick={handleResend} style={{"border": "none", "backgroundColor": "unset", "margin": "auto", width: "70%"}}>
                                <p className="link svelte-1na1a25 primary shadow">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞</p>
                            </button>
                            <button onClick={onClickBack} style={{"border": "none", "backgroundColor": "unset", "margin": "auto", width: "70%"}}>
                                <p className="link svelte-1na1a25 primary shadow">–í–µ—Ä–Ω—É—Ç—å—Å—è</p>
                            </button>
                        </div>
                    </>
                }
                {(isToken && confirmed) &&
                    <>
                        <Infographic title="" titleFloat="left" textFloat="right" text={<>–ü—Ä–∏–≤–µ—Å—Ç–≤—É–µ–º, <strong>{email}</strong>!<br/>
                            –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥. –° –£–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ YUSRA üëã</>}/>
                        <div style={{"width": "100%", "display": "flex", "flexDirection":"column"}}>
                            <button onClick={() => {
                                navigate("/login");
                                window.location.reload();
                            }} style={{"border": "none", "backgroundColor": "unset", "margin": "auto", width: "70%"}}>
                                <p className="link svelte-1na1a25 primary shadow">–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞</p>
                            </button>
                        </div>
                    </>
                }
            </PageContent>
        </Wrapper>
    );
};